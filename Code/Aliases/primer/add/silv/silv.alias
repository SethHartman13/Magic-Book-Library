embed
<drac2>


def set_default_settings(dictionary: dict, default_dictionary: dict) -> dict:
    """
    Loops through dictionary checking for missing entries and adding default ones where necessary

    Args:
        dictionary (dict): Dictionary to be checked
        default_dictionary (dict): Default dictionary

    Return:
        dict: Corrected dictionary
    """

    # For each key in the default dictionary
    for default_key in default_dictionary.keys():

        # If the value is not a dictionary
        if typeof(default_dictionary[default_key]) != "SafeDict":

            if default_key in dictionary.keys():
                pass

            else:
                dictionary[default_key] = default_dictionary[default_key]

        # If the value is a dictionary
        else:

            # Check to see if it is a threshold dictionary
            try:
                for test_key in default_dictionary[default_key].keys():
                    float(test_key)

                if default_key in dictionary.keys():
                    pass

                else:
                    dictionary[default_key] = default_dictionary[default_key]

            # If it is not a threshold dictionary, run recursive call to check values of inner dictionary
            except:
                dictionary[default_key] = set_default_settings(dictionary[default_key], default_dictionary[default_key]) 

    return dictionary


def spell_match_logic(spell_name: str, spell_value: dict, svar_dict: dict, primer_name: str) -> bool:
    """
    Checks to see if the spell is valid to add

    Args:
        spell_name (str): Name of spell
        spell_value (dict): Dictionary containing spell information
        svar_dict (dict): Settings dictionary

    Return:
        bool: Whether or not it is a valid spell
    """

    # Mapping table for the class spells
    primer_class_mapping = {
        "Lorehold Primer": [
            "Cleric",
            "Wizard"
        ],
        "Prismari Primer": [
            "Bard",
            "Sorcerer"
        ],
        "Quandrix Primer": [
            "Druid",
            "Wizard"
        ],
        "Silverquill Primer": [
            "Bard",
            "Cleric"
        ],
        "Witherbloom Primer": [
            "Druid",
            "Wizard"
        ]
    }

    # If spell level is not 1
    if "1" not in str(spell_value["Level"]):
        return False

    # If spell level is 1
    else:

        # Verify settings exists
        if "Settings" not in svar_dict.keys():
            svar_dict["Settings"] = {}

        else:
            pass

        match ("Expanded Class" in svar_dict["Settings"].keys(), "Expanded Class" in spell_value.keys(), "Class" in spell_value.keys()):

            # If optional classes are allowed, "Expanded Class" is a key, and "Class" is a key
            case (True, True, True):

                # If the spell is in the class spelllists specified
                if len(set(spell_value["Class"] + spell_value["Expanded Class"]).intersection(set(primer_class_mapping[primer_name]))) > 0:
                    return True

                # If the spell is not in the class spelllists specified
                else:
                    return False

            # If optional classes are allowed
            case (True, True, False):
                
                # If the spell is in the class spelllists specified
                if len(set(spell_value["Expanded Class"]).intersection(set(primer_class_mapping[primer_name]))) > 0:
                    return True

                # If the spell is not in the class spelllists specified
                else:
                    return False

            # If optional classes are not allowed and "Class" is a key
            case (False, _, True):
        
                # If the spell is in the class spelllists specified
                if len(set(spell_value["Class"]).intersection(set(primer_class_mapping[primer_name]))) > 0:
                    return True

                # If the spell is not in the class spelllists specified
                else:
                    return False

            # If optional classes are allowed, "Expanded Class" is not a key, and "Class" is a key
            case (_, False, True):
        
                # If the spell is in the class spelllists specified
                if len(set(spell_value["Class"]).intersection(set(primer_class_mapping[primer_name]))) > 0:
                    return True

                # If the spell is not in the class spelllists specified
                else:
                    return False

            # If no success conditions were met
            case (_, _, _):
                return False


def get_random_spell(svar_dict: dict, primer_name: str) -> str:
    """
    Gets a random spell for the specified primer book

    Args:
        svar_dict (dict): Server settings dictionary
        primer_name (str): Name of Primer

    Return:
        str: Name of spell
    """

    # Source mapping table
    source_mapping = {
        "Xanathar's Guide to Everything (xgte)": "xgte",
        "Tasha's Cauldron of Everything (tcoe)": "tcoe",
        "Sword Coast Adventurer's Guide (scag)": "scag",
        "Strixhaven: A Curriculum of Chaos (sais)": "sais",
        "Spelljammer Adventures in Space (sacoc)": "sacoc",
        "Player's Handbook (phb)": "phb",
        "Lost Laboratory of Kwalish (llok)": "llok",
        "Icewind Dale Rime of the Frostmaiden (idrotf)": "idrotf",
        "Guildmasters' Guide to Ravnica (ggtr)": "ggtr",
        "Fizban's Treasury of Dragons (ftod)": "ftod",
        "Elemental Evil Player's Companion (eepc)": "eepc",
        "Acquisitions Incorporated (ai)": "ai",
        "Basic Rules (br)": "br",
        "Explorer's Guide to Wildemount (egtw)": "egtw",
        "Tal'Dorei Campaign Setting Reborn (tcsr)": "tcsr"
    }

    # Loads massive spell dictionary
    massive_spell_dict = load_json(get_gvar("6011f3a8-737d-4413-9dbf-04cebe165212"))

    # If UVAR exists, load list
    if (uvar_test := get_uvar("ibook_source_list")):
        uvar_list = load_json(uvar_test)

    # If UVAR does not exist, create list
    else:
        uvar_list = []

    # Create source set
    source_set = set(svar_dict["Books"]).union(set(uvar_list)).union(set(("Basic Rules (br)", )))

    spell_list = []

    # For each source
    for source in source_set:

        # If the source is non-HB
        if source in source_mapping.keys():

            # If partnered content is allowed
            if svar_dict["Settings"]["Partnered Content"]:

                # Load each spell and insert into full_spell_dict
                for spell, spell_details in massive_spell_dict[source_mapping[source]].items():

                    # If is not the SETTINGS entry
                    if spell.upper() != "SETTINGS":

                        # If there was a match, append spell
                        if spell_match_logic(spell, spell_details, svar_dict, primer_name):
                            spell_list.append(spell)

                        # If there was not a match
                        else:
                            pass

                    # If it is the SETTINGS entry
                    else:
                        pass

            # If partnered content is not allowed
            else:

                # If the content is not partnered
                if not massive_spell_dict[source_mapping[source]]["SETTINGS"]["Partnered Content"]:

                    # Load each spell and insert into full_spell_dict
                    for spell, spell_details in massive_spell_dict[source_mapping[source]].items():

                        # If is not the SETTINGS entry
                        if spell.upper() != "SETTINGS":

                            # If there was a match, append spell
                            if spell_match_logic(spell, spell_details, svar_dict, primer_name):
                                spell_list.append(spell)

                            # If there was not a match
                            else:
                                pass

                        # If it is the SETTINGS entry
                        else:
                            pass

                # If the content is partnered
                else:
                    pass
        # If the source is HB and allowed
        elif svar_dict["Settings"]["Homebrew"]:

            # If it pulls a GVAR source
            if (gvar_test := get_gvar(source)):

                # Load each spell and insert into full_spell_dict
                for spell, spell_details in load_json(gvar_test).items():

                    # If is not the SETTINGS entry
                    if spell.upper() != "SETTINGS":

                        # If there was a match, append spell
                        if spell_match_logic(spell, spell_details, svar_dict, primer_name):
                            spell_list.append(spell)

                        # If there was not a match
                        else:
                            pass

                    # If it is the SETTINGS entry
                    else:
                        pass

            # If it doesn't pull a GVAR source, pull a SVAR source 
            else:
                if (svar_test := get_svar(source)):

                    # Load each spell and insert into full_spell_dict
                    for spell, spell_details in load_json(svar_test).items():

                        # If is not the SETTINGS entry
                        if spell.upper() != "SETTINGS":

                            # If there was a match, append spell
                            if spell_match_logic(spell, spell_details, svar_dict, primer_name):
                                spell_list.append(spell)

                            # If there was not a match
                            else:
                                pass

                        # If it is the SETTINGS entry
                        else:
                            pass
                # If it doesn't pull a SVAR source
                else:
                    pass

        # If source is HB and not allowed
        else:
            pass

    return randchoice(spell_list)


def main() -> tuple(str, str, str, str):
    """
    Main program function
    
    Returns:
        str: Title
        str: Content
        str: Thumbnail URL 
        str: Color (hex)
    """

    # Main character object
    ch = character()

    if len(ch.spellbook.spells) > 0:
        pass

    else:
        return "You Have Been Sneak Attacked by an Error", "You must have the ability to cast at least one spell (through racial or class features) to attune to a primer book", "https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/no_wizard.png", "#CC0202"
    
    # If SVAR settings exists
    if (svar_test := get_svar("ibook_settings")):

        # Load dictionary, checking default values
        svar_dict = set_default_settings(load_json(svar_test), {"Settings": {"Homebrew": False, "Partnered Content": True, "Book Limit": 6},"Books": []})

    # If SVAR settings does not exist 
    else:
        svar_dict = {"Settings": {"Homebrew": False, "Partnered Content": True, "Book Limit": 6},"Books": []}

    # If the CVAR exists, load dictionary
    if (cvar_test := ch.get_cvar("ibook_dict")):
        cvar_dict = load_json(cvar_test)

        # If CVAR has "Wizard Books"
        if "Wizard Books" in (cvar_dict_keys := cvar_dict.keys()):
            cvar_book_num = len(cvar_dict["Wizard Books"])

        # If CVAR does not have "Wizard Books"
        else:
            cvar_dict["Wizard Books"] = {}
            cvar_book_num = 0

        # If CVAR has "Primer Books"
        if "Primer Books" in cvar_dict_keys:

            cvar_book_num += len(cvar_dict["Primer Books"])

            # If within book limit and if the character is not already attuned to one
            if cvar_book_num < svar_dict["Settings"]["Book Limit"]:
                if "Silverquill Primer" not in cvar_dict["Primer Books"].keys():

                    # Set unused name key to empty string
                    cvar_dict["Primer Books"]["Silverquill Primer"] = get_random_spell(svar_dict, "Silverquill Primer")

                # If the character is already attuned to a specific book
                else:
                    return "You Have Been Sneak Attacked by an Error", "A creature cannot attune to more than one copy of an item", "https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/no_wizard.png", "#CF142B"

            # If not within book limit
            else:
                return "You Have Been Sneak Attacked by an Error", "You cannot add another book due to reaching the limit. Please remove one before adding another.", "https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/no_wizard.png", "#CF142B"
        
        # If CVAR does not have Primer Books, check book limit
        else:

            # If within book limit
            if cvar_book_num < svar_dict["Settings"]["Book Limit"]:
                cvar_dict["Primer Books"] = {"Silverquill Primer": get_random_spell(svar_dict, "Silverquill Primer")}

            # If not within book limit
            else:
                return "You Have Been Sneak Attacked by an Error", "You cannot add another book due to reaching the limit. Please remove one before adding another.", "https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/no_wizard.png", "#CF142B"

    # If CVAR does not exist, create dictionary
    else:
        cvar_dict = {
            "Wizard Books": {}, 
            "Primer Books": {
                "Silverquill Primer": get_random_spell(svar_dict, "Silverquill Primer")
            }
        }

    # Creates Custom Counter
    ch.create_cc(
        name="Silverquill Primer (Check)",
        minVal="0",
        maxVal="3",
        reset="long",
        dispType="star",
        reset_by="1d3",
        title="Silverquill Primer",
        desc="The Silverquill Primer is a magic textbook created at Strixhaven's Silverquill College. The primer has 3 charges, and it regains 1d3 expended charges daily at dawn. If you make a Charisma (Intimidation) or a Charisma (Persuasion) check while holding the primer, you can expend 1 charge to give yourself a 1d4 bonus to the check, immediately after you roll the d20."
    )

    # Creates Custom Counter
    ch.create_cc(
        name="Silverquill Primer (Spell)",
        minVal="0",
        maxVal="1",
        reset="long",
        dispType="star",
        reset_by="1",
        title="Silverquill Primer",
        desc="Before you finish your next long rest, you can cast the chosen spell once without a spell slot if you are holding the primer. Your spellcasting ability for this spell is your choice of Intelligence, Wisdom, or Charisma."
    )

    # Creates Custom Counter
    ch.create_cc(
        name="Silverquill Primer (Switch)",
        minVal="0",
        maxVal="1",
        reset="long",
        dispType="star",
        reset_by="1",
        title="Silverquill Primer",
        desc="If you study the primer at the end of a long rest, you can choose one 1st-level spell from the bard or cleric spell list. "
    )

    # Set cvar with new book
    ch.set_cvar("ibook_dict", dump_json(cvar_dict))
  
    return f"{name} has added a Silverquill Primer to their Magic Book Library", f"Your starting spell is {cvar_dict['Primer Books']['Silverquill Primer']}\n\n(You can change it once per day)", "https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/silv.png", "#9F8CA2"


# Main program function
title, f, thumb, color = main()


</drac2>
-title "{{title}}"
-f "{{f}}"
-thumb "{{thumb}}"
-color "{{color}}"
-footer "{{ctx.prefix}}primer add silv | Updated 4/4/24 | ShadowsStride"
