embed
<drac2>


def search_list(query: str, item_list: list[str]) -> list[str]|None:
    """
    Searches for item in list.

    Args:
        query (str): The query being made
        item_list (list): List of items

    Return:
        list[str]|None: If it finds at least one match, it returns the item(s) in a list, otherwise it returns None
    """

    # Finds at least 1 match
    if len(item_results := [item for item in item_list if query.lower() in item.lower()]) > 0:
        return item_results

    # If it finds no matches
    else:
        return None


def subtract_counter(book_name: str, ch: AliasCharacter) -> tuple(None|AliasCustomCounter, str):
    """
    Subtracts counter and outputs results

    Args:
        book_name (str): Name of book (which correlates with a custom counter)
        ch (AliasCharacter): Character object
    
    Return:
        AliasCustomCounter|None: Custom counter object, None if error
        str: Results 
    """

    # Grab book cc
    book_cc = ch.cc(book_name)

    # If the book cc is greater than min, subtract from counter
    if book_cc.value > book_cc.min:
        book_cc.mod(-1)

        return book_cc, book_cc.full_str().split("\n")[0] +  " (-1)"

    # If the book cc is less than or equal to min
    else:
        return None, "No charges left"


def activate_primer(ch: AliasCharacter, primer_name: str, error_color: str, error_image: str, i_arg: bool) -> tuple(str, str, str, str):
    """
    Activates the Lorehold Primer

    Args:
        ch (AliasCharacter): Character object
        primer_name (str): Name of primer
        error_color (str): Color hex code
        error_image (str): Image URL
        i_arg (bool): Ignore counter usage

    Return:
        str: Title
        str: Body paragraph
        str: Image URL
        str: Color hex code
    """

    # If using counter
    if not i_arg:
        book_cc, f = subtract_counter(f"{primer_name} (check)", ch)
        num_str = f

    # If not using counter
    else:
        book_cc = ch.cc(f"{primer_name} (check)")
        num_str = ""

    # If no error, construct output
    if book_cc:

        # Roll 1d4
        v_roll = vroll("1d4")

        # Mapping table for the skill details
        primer_skill_mapping = {
            "Lorehold Primer": [
                "Intelligence ([History](https://www.dndbeyond.com/compendium/rules/basic-rules/using-ability-scores#History))",
                "Intelligence ([Religion](https://www.dndbeyond.com/compendium/rules/basic-rules/using-ability-scores#Religion))"
            ],
            "Prismari Primer": [
                "Dexterity ([Acrobatics](https://www.dndbeyond.com/compendium/rules/basic-rules/using-ability-scores#Acrobatics))",
                "Charisma ([Performance](https://www.dndbeyond.com/compendium/rules/basic-rules/using-ability-scores#Performance))"
            ],
            "Quandrix Primer": [
                "Intelligence ([Arcana](https://www.dndbeyond.com/compendium/rules/basic-rules/using-ability-scores#Arcana))",
                "Intelligence ([Nature](https://www.dndbeyond.com/compendium/rules/basic-rules/using-ability-scores#Nature))"
            ],
            "Silverquill Primer": [
                "Charisma ([Inimidation](https://www.dndbeyond.com/compendium/rules/basic-rules/using-ability-scores#Intimidation))",
                "Charisma ([Persuasion](https://www.dndbeyond.com/compendium/rules/basic-rules/using-ability-scores#Persuasion))"
            ],
            "Witherbloom Primer": [
                "Intelligence ([Nature](https://www.dndbeyond.com/compendium/rules/basic-rules/using-ability-scores#Nature))",
                "Wisdom ([Survival](https://www.dndbeyond.com/compendium/rules/basic-rules/using-ability-scores#Survival))"
            ]
        }

        # Short-code mapping table
        shorthand_items = {
            "Lorehold Primer": "lore",
            "Prismari Primer": "pris",
            "Quandrix Primer": "quan",
            "Silverquill Primer": "silv",
            "Witherbloom Primer": "with",
        }

        # Construct output
        f = [
            f"**Results:** {v_roll.full_str}",
            "",
            f"The primer has 3 charges, and it regains 1d3 expended charges daily at dawn. If you make an {primer_skill_mapping[primer_name][0]} or {primer_skill_mapping[primer_name][1]} check while holding the primer, you can expend 1 charge to give yourself a 1d4 bonus to the check, immediately after you roll the d20.",
            "",
            num_str
        ]
        
        return f"{name} Uses Their {primer_name}", "\n".join(f), f"https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/{shorthand_items[primer_name]}.png", "", "" 

    # If error
    else:
        return "You Have Been Sneak Attacked by an Error", f"{primer_name} has no more charges", error_image, error_color, ""


def main(input_list: list[str], ch: AliasCharacter) -> tuple(str, str, str, str, str):
    """
    Main program function

    Args:
        input_list (list[str]): List of user inputs
        ch (AliasCharacter): Character object 

    Return:
        str: Title
        str: Body paragraph
        str: Image URL
        str: Color hex code
        str: Magic book name
    """
    
    # Error color, and error image url
    color = "#CF142B"
    img_url = "https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/no_wizard.png"

    # If there is at least one input
    if len(input_list) > 0:

        # If CVAR exists, load dictionary
        if (cvar_test := ch.get_cvar("ibook_dict")):
            cvar_dict = load_json(cvar_test)

            # If there is a "primer books" key
            if "Primer Books" in (cvar_keys := cvar_dict.keys()):

                # If there is at least one primer book
                if len(cvar_dict["Primer Books"]) > 0:
                    pass

                # If there are no books
                else:
                    return "You Have Been Sneak Attacked by an Error", "There are no primer books in your library", img_url, color, ""

            # If there is not a "Primer Books" key
            else:
                return "You Have Been Sneak Attacked by an Error", "There are no primer books in your library", img_url, color, ""

        # If the CVAR does not exist
        else:
            return "You Have Been Sneak Attacked by an Error", "CVAR `ibook_dict` does not exist", img_url, color, ""

    # If there were no inputs
    else:
        return "You Have Been Sneak Attacked by an Error", "Expected at least one argument", img_url, color, ""

    # If there is at least one magic book match
    if (result_key := search_list(input_list[0], cvar_dict["Primer Books"].keys())):

        # If there is exactly one match
        if len(result_key) == 1:
            result_key = result_key[0]

        # If there are more than one match, search every match
        else:
            for key in result_key:

                # If it is not an exact match
                if key.lower() != input_list[0].lower():
                    pass

                # If it is an exact match
                else:
                    result_key = key
                    break

            # If there was not an exact match
            if typeof(result_key) != "str":
                result_key.insert(0, "**Multiple Matches Found:**")

                return "You Have Been Sneak Attacked by an Error", "\n".join(result_key), img_url, thumb, ""

            # If there was an exact match
            else:
                pass

    # If there were no matches
    else:
        return "You Have Been Sneak Attacked by an Error", "Book not found", img_url, thumb, ""

    # If ignoring counter usage
    if "-i" in " ".join(input_list):
        i_arg = True

    else:
        i_arg = False

    # Non-HB source
    if result_key in ["Lorehold Primer", "Prismari Primer", "Quandrix Primer", "Silverquill Primer", "Witherbloom Primer"]:
        return activate_primer(ch, result_key, color, img_url, i_arg)

    # All other sources
    else:
        return "You Have Been Sneak Attacked by an Error", "Shadow has not put in support for HB activation content", "https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/no_wizard.png", "#CF142B", ""


# Main character object
ch = character()

input_list = &ARGS&

# Main program function
title, f, thumb, color, primer_name = main(input_list, ch)
l = "<"

# If error and not -i argument
if "error" in title and primer_name != "" and not "-i" in " ".join(input_list):
    ch.mod_cc(primer_name, 1)

# No error or -i argument used
else:
    pass


</drac2>
-title "{{title}}"
-f "{{f}}"
-thumb "{{thumb}}"
-color "{{color}}"
-footer "!primer activate [magic book name] | Updated 12/4/23 | ShadowsStride"
