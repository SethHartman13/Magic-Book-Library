embed
<drac2>


def search_list(query: str, item_list: list[str]) -> list[str]|None:
    """
    Searches for item in list.

    Args:
        query (str): The query being made
        item_list (list): List of items

    Return:
        list[str]|None: If it finds at least one match, it returns the item(s) in a list, otherwise it returns None
    """

    # Finds at least 1 match
    if len(item_results := [item for item in item_list if query.lower() in item.lower()]) > 0:
        return item_results

    # If it finds no matches
    else:
        return None


def main(input_list: list[str]) -> tuple(str, str, str, str):
    """
    Main program function

    Args:
        input_list (list[str]): List of user inputs

    Return:
        str: Title
        str: Content
        str: Image URL
        str: Color Hex Code
    """

    # Character object
    ch = character()

    # If there is at least 1 input
    if len(input_list) > 0:

        # If CVAR exists, load dictionary
        if (cvar_test := ch.get_cvar('ibook_dict')):
            cvar_dict = load_json(cvar_test)

            # If Primer Books is a key
            if "Primer Books" in cvar_dict.keys():

                # Short-code mapping table
                shorthand_items = {
                    "Lorehold Primer": "lore",
                    "Prismari Primer": "pris",
                    "Quandrix Primer": "quan",
                    "Silverquill Primer": "silv",
                    "Witherbloom Primer": "with",
                }

                # If book is found
                if (key_result := search_list(input_list[0], cvar_dict['Primer Books'].keys())):

                    # If there is exactly 1 input
                    if len(key_result) == 1:

                        # Store backup and update CVAR
                        ch.set_cvar('ibook_dict_backup', dump_json(cvar_dict))
                        book_removed_data = cvar_dict['Primer Books'].pop(key_result[0])
                        ch.set_cvar('ibook_dict', dump_json(cvar_dict))

                        # If book is not HB
                        if key_result[0] in shorthand_items.keys():
                            short_thumb = shorthand_items[key_result[0]]

                        # If book is HB
                        else:
                            short_thumb = randchoice(list(shorthand_items.values()))

                        return f"{name} has removed {key_result[0]} from their Magic Book Library", f"**Spell Removed:**\n{book_removed_data}", f"https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/{short_thumb}.png", ""

                    # If there is more than one input, look for an exact match
                    else:
                        for key in key_result:

                            # If it is not an exact match
                            if key.lower() != input_list[0].lower():
                                pass

                            # If it is an exact match
                            else:

                                # Store backup and update CVAR
                                ch.set_cvar('ibook_dict_backup', dump_json(cvar_dict))
                                book_removed_data = cvar_dict['Primer Books'].pop(key)
                                ch.set_cvar('ibook_dict', dump_json(cvar_dict))

                                # If book is not HB
                                if key in shorthand_items.keys():
                                    short_thumb = shorthand_items[key]

                                # If book is HB
                                else:
                                    short_thumb = randchoice(list(shorthand_items.values()))

                                return f"{name} has removed {key} from their Magic Book Library", f"**Spell Removed:**\n{book_removed_data}", f"https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/{short_thumb}.png", ""

                        # If no exact match was found
                        key_result.insert(0, "**Multiple Matches Found:**")

                        return f"{ctx.author.display_name} has encountered an error", "\n".join(key_result), "https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/no_wizard.png", "#CF142B"

                # If book is not found      
                else:
                    return f"{ctx.author.display_name} has encountered an error", "Spell not Found", "https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/no_wizard.png", "#CF142B"

            # If Primer Books is not a key
            else:
                return f"{ctx.author.display_name} has encountered an error", "Primer Books not found", "https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/no_wizard.png", "#CF142B"

        # CVAR does not exist
        else:
            return f"{ctx.author.display_name} has encountered an error", "CVAR `ibook_dict` does not exist", "https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/no_wizard.png", "#CF142B"

    # There were no inputs
    else:
        return f"{ctx.author.display_name} has encountered an error", "Expected at least one input", "https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/no_wizard.png", "#CF142B"


# Main program function
title, f, thumb, color = main(&ARGS&)

</drac2>
-title "{{title}}"
-f "{{f}}"
-thumb "{{thumb}}"
-color "{{color}}"
-footer "!primer remove [source name] | Updated 12/2/23 | ShadowsStride"
