embed
<drac2>


def search_list(query: str, item_list: list[str]) -> list[str]|None:
    """
    Searches for item in list.

    Args:
        query (str): The query being made
        item_list (list): List of items

    Return:
        list[str]|None: If it finds at least one match, it returns the item(s) in a list, otherwise it returns None
    """

    # Finds at least 1 match
    if len(item_results := [item for item in item_list if query.lower() in item.lower()]) > 0:
        return item_results

    # If it finds no matches
    else:
        return None


def main(input_list: list[str], ch: character) -> str:



    if len(input_list) == 0:

        if (cvar_test := ch.get_cvar('ibook_dict')):
            cvar_dict = load_json(cvar_test)


            if "Primer Books" in ibook_dict.keys():

                if (key_result := search_list(input_list[0], ibook_dict['Primer Books'].keys())):

                    if len(key_result) == 1:
                        ch.set_cvar('ibook_dict_backup', dump_json(cvar_dict))

                        book_removed_data = ibook_dict['Primer Books'].pop(key_result[0])

                        ch.set_cvar('ibook_dict', dump_json(cvar_dict))

                        return key_result[0], book_removed_data

                    else:
                        for key in key_result:
                            if key.lower() != input_list[0].lower():
                                pass

                            else:
                                ch.set_cvar('ibook_dict_backup', dump_json(cvar_dict))

                                book_removed_data = ibook_dict['Primer Books'].pop(key)

                                ch.set_cvar('ibook_dict', dump_json(cvar_dict))

                                return key, book_removed_data

                        key_result.insert(0, "**Multiple Matches Found:**")

                        return, None, "\n".join(key_result)
                        
                else:
                    return None, "Spell not found"

            else:
                return None, "Primer Books not found"

        else:
            return None, "Primer Books not found"

    else:
        return None, "Expected at least one argument"


ch = character()

book_name, book_info = main(&ARGS&, ch)


if book_name:

    title = f"{name} has removed {book_name} from their magic book library"
    f = f"**Spells Removed:**\n{book_info}"
    color = ""
    thumb = f"https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/wizard_read_book{randchoice(['', 1, 2, 3, 4, 5])}.png"

else:
    title = f"{ctx.author.display_name} has encountered an error"
    f = book_info
    thumb = f"https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/no_wizard.png"
    color = "#cf142b"


</drac2>
-title "{{title}}"
-f "{{f}}"
-thumb "{{thumb}}"
-color "{{color}}"
-footer "!primer remove [book_name] | Updated 11/4/23 | ShadowsStride"
















