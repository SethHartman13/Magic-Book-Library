embed
<drac2>


def search_list(query: str, item_list: list[str]) -> list[str]|None:
    """
    Searches for item in list.

    Args:
        query (str): The query being made
        item_list (list): List of items

    Return:
        list[str]|None: If it finds at least one match, it returns the item(s) in a list, otherwise it returns None
    """

    # Finds at least 1 match
    if len(item_results := [item for item in item_list if query.lower() in item.lower()]) > 0:
        return item_results

    # If it finds no matches
    else:
        return None


def main(input_list: list[str]) -> str:

    ch = character()

    if len(input_list) > 0:

        if (cvar_test := ch.get_cvar('ibook_dict')):
            cvar_dict = load_json(cvar_test)


            if "Wizard Books" in cvar_dict.keys():

                if (key_result := search_list(input_list[0], cvar_dict['Wizard Books'].keys())):

                    if len(key_result) == 1:
                        ch.set_cvar('ibook_dict_backup', dump_json(cvar_dict))

                        book_removed_data = cvar_dict['Wizard Books'].pop(key_result[0])

                        ch.set_cvar('ibook_dict', dump_json(cvar_dict))

                        return key_result[0], book_removed_data

                    else:
                        for key in key_result:
                            if key.lower() != input_list[0].lower():
                                pass

                            else:
                                ch.set_cvar('ibook_dict_backup', dump_json(cvar_dict))

                                book_removed_data = cvar_dict['Wizard Books'].pop(key)

                                ch.set_cvar('ibook_dict', dump_json(cvar_dict))

                                return key, book_removed_data

                        key_result.insert(0, "**Multiple Matches Found:**")

                        return None, "\n".join(key_result)
                        
                else:
                    return None, "Wizard Book not found"

            else:
                return None, "Wizard Books not found"

        else:
            return None, "Wizard Books not found"

    else:
        return None, "Expected at least one argument"


book_name, book_info = main(&ARGS&)


if book_name:

    # Short-code mapping table
    shorthand_items = {
        "Alchemical Compendium": "alch",
        "Astromancy Archive": "astr",
        "Atlas of Endless Horizons": "atla",
        "Crystalline Chronicle": "crys",
        "Duplicitous Manuscript": "dupl",
        "Fulminating Treatise": "fulm",
        "Heart Weaver's Primer": "hear",
        "Libram of Souls and Flesh": "libr",
        "Planecaller's Codex": "plan",
        "Protective Verses": "prot"
    }

    title = f"{name} has removed {book_name} from their Magic Book Inventory"
    color = ""

    if book_name in shorthand_items.keys():
        thumb = f"https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/{shorthand_items[book_name]}.png"

    else:
        thumb - f"https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/{randchoice(shorthand_items.values())}.png"

    if typeof(book_info) == "SafeList":
        f = f"**Spells Removed:**\n" + "\n".join(book_info)

    else:
        f = f"**Spells Removed:**\n" + "\n".join([spell for spell_list in book_info.values() for spell in spell_list])

else:
    title = "You Have Been Sneak Attacked by an Error"
    f = book_info
    thumb = f"https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/no_wizard.png"
    color = "#cf142b"


</drac2>
-title "{{title}}"
-f "{{f}}"
-thumb "{{thumb}}"
-color "{{color}}"
-footer "{{ctx.prefix}}wizbook remove [source name] | Updated 12/13/23 | ShadowsStride"
