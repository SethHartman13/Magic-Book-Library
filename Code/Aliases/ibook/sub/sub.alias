embed
<drac2>


def output_sub_list(page_num: int, uvar_list: list[str]) -> tuple(str, str, str, str):
    """
    Outputs available subscription items

    Args:
        page_num (int): Page Number
        uvar_list: (list[str]): List of source names

    Return:
        str: Title
        str: Content
        str: Image URL
        str: Color Hex Code
    """

    # Source dictionary with values of messages sent to user
    items = {
        "Acquisition's Incorporated (ai)": f"`{ctx.prefix}ibook sub ai`: Subscribes to Acquisition's Incorporated",
        "Elemental Evil Player's Companion (eepc)": f"`{ctx.prefix}ibook sub eepc`: Subscribes to Elemental Evil Player's Companion",
        "Explorer's Guide to Wildemount (egtw)": f"`{ctx.prefix}ibook sub egtw`: Subscribes to Explorers Guide to Wildemount",
        "Fizban's Treasury of Dragons (ftod)": f"`{ctx.prefix}ibook sub ftod`: Subscribes to Fizban's Treasury of Dragons",
        "Guildmasters' Guide to Ravnica (ggtr)": f"`{ctx.prefix}ibook sub ggtr`: Subscribes to Guildmaster's Guide to Ravnica",
        "Icewind Dale Rime of the Frostmaiden (idrotf)": f"`{ctx.prefix}ibook sub idrotf`: Subscribes to Icewind Dale: Rime of the Frostmaiden",
        "Lost Laboratory of Kwalish (llok)": f"`{ctx.prefix}ibook sub llok`: Subscribes to Lost Laboratory of Kwalish",
        "Player's Handbook (phb)": f"`{ctx.prefix}ibook sub phb`: Subscribes to the Player's Handbook",
        "Spelljammer Adventures in Space (sacoc)": f"`{ctx.prefix}ibook sub sacoc`: Subscribes to Spelljammer Adventures in Space",
        "Strixhaven: A Curriculum of Chaos (sais)": f"`{ctx.prefix}ibook sub sais`: Subscribes to Strixhaven: A Curriculum of Chaos",
        "Sword Coast Adventurer's Guide (scag)": f"`{ctx.prefix}ibook sub scag`: Subscribes to Sword Coast Adventurer's Guide",
        "Tasha's Cauldron of Everything (tcoe)": f"`{ctx.prefix}ibook sub tcoe`: Subscribes to Tasha's Cauldron of Everything",
        "Tal'Dorei Campaign Setting Reborn (tcsr)": f"`{ctx.prefix}ibook sub tcsr`: Subscribes to Tal'Dorei Campaign Setting Reborn",
        "Xanathar's Guide to Everything (xgte)": f"`{ctx.prefix}ibook sub xgte`: Subscribes to Xanathar's Guide to Everything" 
    }

    # Short-code mapping table
    shorthand_items = {
        "Acquisition's Incorporated (ai)": "ai",
        "Elemental Evil Player's Companion (eepc)": "eepc",
        "Explorer's Guide to Wildemount (egtw)": "egtw",
        "Fizban's Treasury of Dragons (ftod)": "ftod",
        "Guildmasters' Guide to Ravnica (ggtr)": "ggtr",
        "Icewind Dale Rime of the Frostmaiden (idrotf)": "idrotf",
        "Lost Laboratory of Kwalish (llok)": "llok",
        "Player's Handbook (phb)": "phb",
        "Spelljammer Adventures in Space (sacoc)": "sacoc",
        "Strixhaven: A Curriculum of Chaos (sais)": "sais",
        "Sword Coast Adventurer's Guide (scag)": "scag",
        "Tasha's Cauldron of Everything (tcoe)": "tcoe",
        "Tal'Dorei Campaign Setting Reborn (tcsr)": "tcsr",
        "Xanathar's Guide to Everything (xgte)": "xgte" 
    }

    # Creates a list within a list of item_outputs with their short-code
    output_list = [[items[key], shorthand_items[key]] for key in items.keys() if key not in uvar_list]

    # Seperates the lists into groupings of 4 (if possible)
    result_list = [output_list[i:i+4] for i in range(0,len(output_list), 4)]

    # Grabs length of result_list
    res_length = len(result_list)

    match res_length:

        # If there is just one page
        case 1:
            return f"{ctx.author.display_name} checks what they can subscribe to", "\n\n".join(["**Available Sourcebooks:**"] + [item_list[0] for item_list in result_list[0]]), f"https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/{randchoice([item_list[1] for item_list in result_list[0]])}.png", ""
            

        # If there are more than one page
        case _ if res_length > 1:

            match page_num:

                # If page number is less than 1
                case _ if page_num < 1:
                    page_num = 1

                # If page number is greater than length
                case _ if page_num > res_length:
                    page_num = res_length
                
                # If page number is within bounds
                case _:
                    pass

            return f"{ctx.author.display_name} checks what they can subscribe to", "\n\n".join([f"**Available Sourcebooks ({page_num}/{res_length}):**"] + [item_list[0] for item_list in result_list[page_num - 1]]), f"https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/{randchoice([item_list[1] for item_list in result_list[page_num - 1]])}.png", ""


        # If there are no pages
        case _:
            return f"{ctx.author.display_name} checks what they can subscribe to", "**Available Sourcebooks:**\n\nNone", f"https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/{randchoice(['ai', 'eepc', 'egtw', 'ftod', 'ggtr', 'idrotf', 'llok', 'phb', 'sais', 'sacoc', 'scag', 'tcsr', 'tcoe', 'xgte'])}.png", ""
            


def add_to_uvar(add_string: str, uvar_list: list[str]) -> tuple(str, str, str, str):
    """
    Adds sources to UVAR from svar/gvar

    Args:
        add_string (str): Name/GUID of source
        uvar_list (list[str]): Current UVAR source list

    Return:
        str: Title
        str: Content
        str: Image URL
        str: Color Hex Code
    """
    
    # If SVAR exists, add SVAR name to UVAR list
    if (svar_test := get_svar(add_string)):
        uvar_list.append(add_string)

    # If SVAR does not exist, if GVAR exists, add GVAR GUID to UVAR list
    else:
        if (gvar_test := get_gvar(add_string)):
            uvar_list.append(add_string)

        # If SVAR/GVAR does not exist
        else:
            title, f, thumb, _ = output_sub_list(1, uvar_list)
            f = f"`SVAR\GVAR not found ({add_string})`\n\n{f}"
            return title, f, thumb, "#CC0202"

    # Save UVAR
    set_uvar("ibook_source_list", dump_json(uvar_list))

    return "You have added a SVAR/GVAR to their sourcebook list", "", f"https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/{randchoice(['ai', 'eepc', 'egtw', 'ftod', 'ggtr', 'idrotf', 'llok', 'phb', 'sais', 'sacoc', 'scag', 'tcsr', 'tcoe', 'xgte'])}.png", ""


def main(input_list: list[str]) -> str:
    """
    Main program function
    
    Args:
        input_list (list[str]): List of user inputs

    Return:
        str: Title
        str: Content
        str: Image URL
        str: Color Hex Code
    """

    # If UVAR exists, load list
    if (uvar_test := get_uvar("ibook_source_list")):
        uvar_list = load_json(uvar_test)

    # If UVAR doesn't exist, create list
    else:
        uvar_list = []

    # If there is at least one input
    if len(input_list) > 0:

        # Tries to convert input to integer to output list
        try:
            return output_sub_list(int(input_list[0]), uvar_list)

        # If failed, looks to add SVAR/GVAR to UVAR
        except:
            return add_to_uvar(input_list[0], uvar_list)

    # If there are no inputs
    else:
        return output_sub_list(1, uvar_list) 


# Main program function
title, f, thumb, color = main(&ARGS&)
l = "<"

</drac2>
-title "{{title}}"
-f "{{f}}"
-thumb "{{thumb}}"
-color "{{color}}"
-footer "{{ctx.prefix}}ibook sub {{l}}#/GVAR/SVAR> | Updated 12/11/23 | ShadowsStride"