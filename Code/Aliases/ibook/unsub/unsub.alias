embed
<drac2>


def search_list(query: str, item_list: list[str]) -> list[str]|None:
    """
    Searches for item in list.

    Args:
        query (str): The query being made
        item_list (list): List of items

    Return:
        list[str]|None: If it finds at least one match, it returns the item(s) in a list, otherwise it returns None
    """

    # Finds at least 1 match
    if len(item_results := [item for item in item_list if query.lower() in item.lower()]) > 0:
        return item_results

    # If it finds no matches
    else:
        return None


def image_grab(title_str: str) -> str:
    """
    Grabs the image code requested (or a random one)

    Args:
        title_str (str): Name of sourcebook

    Return:
        str: Image code
    """

    # Checks to see if it finds a match by checking this set (for randomness to try to obtain average time complexity)
    for code in {'(ai)', '(eepc)', '(egtw)', '(ftod)', '(ggtr)', '(idrotf)', '(llok)', '(phb)', '(sacoc)', '(sais)', '(scag)', '(tcoe)', '(tcsr)', '(xgte)'}:
        if code.lower() in title_str.lower():
            return code.split("(")[1].split(")")[0]

        else:
            pass

    # If it found no match, return random code
    return randchoice(['ai', 'eepc', 'egtw', 'ftod', 'ggtr', 'idrotf', 'llok', 'phb', 'sacoc', 'sais', 'scag', 'tcoe', 'tcsr', 'xgte'])


def main(input_list: list[str]) -> str:
    """
    Main program function

    Args:
        input_list (list[str]): List of inputs from user

    Return:
        str: Results
    """

    # If there was at least one input
    if len(input_list) > 0:
        pass
    
    # If there were no inputs
    else:
        return None, "Expected at least one argument"
    
    # If UVAR exists, load list
    if (uvar_test := get_uvar("ibook_source_list")):
        uvar = load_json(uvar_test)

    # If UVAR does not exist
    else:
        return None, "UVAR does not exist"

    # If it finds at least one match
    if (result_list := search_list(input_list[0], uvar)):

        # If it finds exactly one match
        if len(result_list) == 1:

            # Remove item and update UVAR
            removed_item = uvar.pop(uvar.index(result_list[0]))
            set_uvar("ibook_source_list", dump_json(uvar))

            return f"{ctx.author.display_name} has removed {removed_item} from their ibook list", ""

        # If it finds more than one match
        else:

            # Searches through all the matches, trying to find an exact match
            for item in result_list:

                # If not an exact match
                if item.lower() != input_list[0].lower():
                    pass

                # If an exact match, remove item and update UVAR
                else:
                    removed_item = uvar.pop(uvar.index(item))
                    set_uvar("ibook_source_list", dump_json(uvar))

                    return f"{ctx.author.display_name} has removed {removed_item} from their ibook list", ""
            
            result_list.insert(0, "**Multiple Matches Found:**")

            return None, "\n".join(result_list)

    # If it finds no matches
    else:
        return None, "Sourcebook not found"


# Main program function
title, f = main(&ARGS&)

# If there was no error
if title:

    thumb = f"{image_grab(title)}"
    color = ""

# If there was an error
else:
    title = f"{ctx.author.display_name} has encountered an error"
    thumb = f"no_wizard"
    color = "#cc0202"


</drac2>
-title "{{title}}"
-f "{{f}}"
-thumb "https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/{{thumb}}.png"
-color "{{color}}"
-footer "!ibook unsub [source name] | Updated 11/21/23 | ShadowsStride"