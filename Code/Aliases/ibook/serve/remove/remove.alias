multiline
<drac2>

def search_list(query: str, item_list: list[str]) -> list[str]|None:
    """
    Searches for item in list.

    Args:
        query (str): The query being made
        item_list (list): List of items

    Return:
        list[str]|None: If it finds at least one match, it returns the item(s) in a list, otherwise it returns None
    """

    # Finds at least 1 match
    if len(item_results := [item for item in item_list if query.lower() in item.lower()]) > 0:
        return item_results

    # If it finds no matches
    else:
        return None


def main(input_list: list[str]) -> str:
    """
    Main Program Function
    
    Args:
        input_list (list[str]): List of inputs from the user

    Return:
        str: Results
    
    """

    # If it recieved at least one input
    if len(input_list) > 0:

        # If the SVAR exists, load it
        if (svar_test := get_svar("ibook_settings")):
            svar = load_json(svar_test)

        # If the SVAR does not exist
        else:
            return None, "SVAR has not been created"

    # If it recieved no inputs 
    else:
        return None, "Expected at least one argument"

    # If it finds at least one match
    if (item_results := search_list(input_list[0], svar['Books'])):

        # If it finds exactly one match, remove item from list
        if len(item_results) == 1:
            removed_item = svar['Books'].pop(svar['Books'].index(item_results[0]))

            return dump_json(svar), removed_item

        # If it finds more than one match
        else:

            # For each match
            for potential_match in item_results:

                # If it does not find an exact match
                if potential_match.lower() != input_list[0].lower():
                    pass

                # If it finds an exact match, remove item from list
                else:
                    removed_item = svar['Books'].pop(svar['Books'].index(potential_match))

                    return dump_json(svar), removed_item

            # If it did not find an exact match
            item_results.insert(0, "**Multiple Sources Found:**")
            return None, "\n".join(item_results)

    # If it finds no matches
    else:
        return None, "Source not found"


# Main program function
outcome, content = main(&ARGS&)

# If there were no errors
if outcome:
    title = f"{ctx.author.display_name} has (attempted) to remove {content} from `ibook_settings`"
    f = ""
    color = ""
    thumb = f"https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/wizard_read_book{randchoice(['', 2, 3, 4, 5])}.png"
    svar_str = f"{ctx.prefix}svar ibook_settings {outcome}"

# If there were errors
else:
    title = f"{ctx.author.display_name} has encountered an error"
    f = content
    color = "#cc0202"
    thumb = "https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/no_wizard.png"

    svar_str = ""

</drac2>
{{svar_str}}
{{ctx.prefix}}embed -title "{{title}}" -f "{{f}}" -color "{{color}}" -thumb "{{thumb}}" -footer "{{ctx.prefix}}ibook serve remove [source] | Updated 12/11/23 | ShadowsStride"