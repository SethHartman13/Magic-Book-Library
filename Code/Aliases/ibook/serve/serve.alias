embed
<drac2>


def output_serve_list(page_num: int, uvar_list: list[str], svar_list: list[str]) -> str:

    for item in set(uvar_list).intersection(svar_list):
        uvar_list.remove(item)

    items = {
        "Acquisition's Incorporated (ai)": "`!ibook serve ai`: Serves Acquisition's Incorporated content",
        "Elemental Evil Player's Companion (eepc)": "`!ibook serve eepc`: Serves Elemental Evil Player's Companion content",
        "Explorer's Guide to Wildemount (egtw)": "`!ibook serve egtw`: Serves Explorers Guide to Wildemount content",
        "Fizban's Treasury of Dragons (ftod)": "`!ibook serve ftod`: Serves Fizban's Treasury of Dragons content",
        "Guildmasters' Guide to Ravnica (ggtr)": "`!ibook serve ggtr`: Serves Guildmaster's Guide to Ravnica content",
        "Icewind Dale Rime of the Frostmaiden (idrotf)": "`!ibook serve idrotf`: Serves Icewind Dale: Rime of the Frostmaiden content",
        "Lost Laboratory of Kwalish (llok)": "`!ibook serve llok`: Serves Lost Laboratory of Kwalish content",
        "Player's Handbook (phb)": "`!ibook serve phb`: Serves the Player's Handbook content",
        "Spelljammer Adventures in Space (sacoc)": "`!ibook serve sacoc`: Serves Spelljammer Adventures in Space content",
        "Strixhaven: A Curriculum of Chaos (sais)": "`!ibook serve sais`: Serves Strixhaven: A Curriculum of Chaos content",
        "Sword Coast Adventurer's Guide (scag)": "`!ibook serve scag`: Serves Sword Coast Adventurer's Guide content",
        "Tasha's Cauldron of Everything (tcoe)": "`!ibook serve tcoe`: Serves Tasha's Cauldron of Everything content",
        "Tal'Dorei Campaign Setting Reborn (tcsr)": "`!ibook serve tcsr`: Serves Tal'Dorei Campaign Setting Reborn content",
        "Xanathar's Guide to Everything (xgte)": "`!ibook serve xgte`: Serves Xanathar's Guide to Everything content" 
    }

    shorthand_items = {
        "Acquisition's Incorporated (ai)": "ai",
        "Elemental Evil Player's Companion (eepc)": "eepc",
        "Explorer's Guide to Wildemount (egtw)": "egtw",
        "Fizban's Treasury of Dragons (ftod)": "ftod",
        "Guildmasters' Guide to Ravnica (ggtr)": "ggtr",
        "Icewind Dale Rime of the Frostmaiden (idrotf)": "idrotf",
        "Lost Laboratory of Kwalish (llok)": "llok",
        "Player's Handbook (phb)": "phb",
        "Spelljammer Adventures in Space (sacoc)": "sacoc",
        "Strixhaven: A Curriculum of Chaos (sais)": "sais",
        "Sword Coast Adventurer's Guide (scag)": "scag",
        "Tasha's Cauldron of Everything (tcoe)": "tcoe",
        "Tal'Dorei Campaign Setting Reborn (tcsr)": "tcsr",
        "Xanathar's Guide to Everything (xgte)": "xgte" 
    }

    q = "'"
    i = 1
    for item in uvar_list:
        if item in items.keys():
            pass

        else:
            if " " in item:
                items[item] = f"`ibook serve {q}{item}{q}`: Serves custom content #{i}"

            else:
                items[item] = f"`ibook serve {item}`: Serves custom content #{i}"

            shorthand_items[item] = ""
            i += 1

    display_list = [items[key] for key in items.keys() if key in uvar_list]
    shorthand_list = [shorthand_items[key] for key in items.keys() if key in uvar_list]

    result_list = [display_list[i:i+3] for i in range(0,len(display_list), 3)]
    short_list = [shorthand_list[i:i+3] for i in range(0,len(shorthand_list), 3)]

    if page_num > 1 and (res_length := len(result_list)):

        if page_num < res_length:
            pass

        else:
            page_num = res_length

    else:
        page_num = 1

    if len(result_list) > 0:
        res_length = len(result_list)

    else:
        result_list.append(['None'])
        short_list.append(['ai', 'eepc', 'egtw', 'ftod', 'ggtr', 'idrotf', 'llok', 'phb', 'sais', 'sacoc', 'scag', 'tcsr', 'tcoe', 'xgte'])
        page_num = 1
        res_length = 1

    result_list[page_num-1].insert(0, f"**Available Sourcebooks: ({page_num}/{res_length})**")

    while "" in short_list[page_num-1]:
        short_list[page_num-1].remove("")

    return f"{ctx.author.display_name} checks what content they can serve", "\n\n".join(result_list[page_num-1]), f"https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/{randchoice(short_list[page_num-1])}.png", ""


def main(input_list: list[str]) -> str:

    if (uvar_test := get_uvar("ibook_source_list")):
        if len((uvar_list := load_json(uvar_test))) != 0:
            pass

        else:
            return f"{ctx.author.display_name} checks what content they can serve", "None", f"https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/{randchoice(['ai', 'eepc', 'egtw', 'ftod', 'ggtr', 'idrotf', 'llok', 'phb', 'sais', 'sacoc', 'scag', 'tcsr', 'tcoe', 'xgte'])}.png", ""

    else:
        return f"{ctx.author.display_name} checks what content they can serve", "None", f"https://raw.githubusercontent.com/SethHartman13/Magic-Book-Library/main/Code/Images/{randchoice(['ai', 'eepc', 'egtw', 'ftod', 'ggtr', 'idrotf', 'llok', 'phb', 'sais', 'sacoc', 'scag', 'tcsr', 'tcoe', 'xgte'])}.png", ""

    if (svar_test := get_svar("ibook_settings")):
        svar_list = load_json(svar_test)['Books']

    else:
        svar_list = []
    
    if len(input_list) > 0:
        try:
            return output_serve_list(int(input_list[0]), uvar_list, svar_list)

        except:
            return output_serve_list(1, uvar_list, svar_list)

    else:
        return output_serve_list(1, uvar_list, svar_list) 


title, f, thumb, color = main(&ARGS&)
l = "<"

</drac2>
-title "{{title}}"
-f "{{f}}"
-thumb "{{thumb}}"
-color "{{color}}"
-footer "!ibook serve {{l}}#> | Updated 11/16/23 | ShadowsStride"